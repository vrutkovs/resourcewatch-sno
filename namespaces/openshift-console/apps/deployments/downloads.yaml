apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    operator.openshift.io/spec-hash: 1f6a7c00b90a67ca9fdbdf744b940b16529190679223cf29e2912143d2213ede
  creationTimestamp: "2023-03-09T14:32:12Z"
  generation: 1
  labels:
    app: console
    component: downloads
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:operator.openshift.io/spec-hash: {}
        f:labels:
          .: {}
          f:app: {}
          f:component: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:annotations:
              .: {}
              f:target.workload.openshift.io/management: {}
            f:labels:
              .: {}
              f:app: {}
              f:component: {}
            f:name: {}
          f:spec:
            f:affinity: {}
            f:containers:
              k:{"name":"download-server"}:
                .: {}
                f:args: {}
                f:command: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:livenessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":8080,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                    f:protocol: {}
                f:readinessProbe:
                  .: {}
                  f:failureThreshold: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
                  f:periodSeconds: {}
                  f:successThreshold: {}
                  f:timeoutSeconds: {}
                f:resources:
                  .: {}
                  f:requests:
                    .: {}
                    f:cpu: {}
                    f:memory: {}
                f:securityContext:
                  .: {}
                  f:allowPrivilegeEscalation: {}
                  f:capabilities:
                    .: {}
                    f:drop: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:nodeSelector: {}
            f:priorityClassName: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext:
              .: {}
              f:runAsNonRoot: {}
              f:seccompProfile:
                .: {}
                f:type: {}
            f:terminationGracePeriodSeconds: {}
            f:tolerations: {}
    manager: console
    operation: Update
    time: "2023-03-09T14:32:12Z"
  name: downloads
  namespace: openshift-console
  resourceVersion: "14817"
  uid: 01cb3315-d49e-4b0f-9e54-758d7eef6bbe
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: console
      component: downloads
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      creationTimestamp: null
      labels:
        app: console
        component: downloads
      name: downloads
    spec:
      affinity: {}
      containers:
      - args:
        - -c
        - "cat <<EOF >>/tmp/serve.py\nimport errno, http.server, os, re, signal, socket,
          sys, tarfile, tempfile, threading, time, zipfile\n\nsignal.signal(signal.SIGTERM,
          lambda signum, frame: sys.exit(0))\n\ndef write_index(path, message):\n
          \ with open(path, 'wb') as f:\n    f.write('\\n'.join([\n      '<!doctype
          html>',\n      '<html lang=\"en\">',\n      '<head>',\n      '  <meta charset=\"utf-8\">',\n
          \     '</head>',\n      '<body>',\n      '  {}'.format(message),\n      '</body>',\n
          \     '</html>',\n      '',\n    ]).encode('utf-8'))\n\n# Launch multiple
          listeners as threads\nclass Thread(threading.Thread):\n  def __init__(self,
          i, socket):\n    threading.Thread.__init__(self)\n    self.i = i\n    self.socket
          = socket\n    self.daemon = True\n    self.start()\n\n  def run(self):\n
          \   server = http.server.SimpleHTTPRequestHandler\n    server.server_version
          = \"OpenShift Downloads Server\"\n    server.sys_version = \"\"\n    httpd
          = http.server.HTTPServer(addr, server, False)\n\n    # Prevent the HTTP
          server from re-binding every handler.\n    # https://stackoverflow.com/questions/46210672/\n
          \   httpd.socket = self.socket\n    httpd.server_bind = self.server_close
          = lambda self: None\n\n    httpd.serve_forever()\n\ntemp_dir = tempfile.mkdtemp()\nprint('serving
          from {}'.format(temp_dir))\nos.chdir(temp_dir)\nfor arch in ['amd64', 'arm64',
          'ppc64le', 's390x']:\n  os.mkdir(arch)\ncontent = ['<a href=\"oc-license\">license</a>']\nos.symlink('/usr/share/openshift/LICENSE',
          'oc-license')\n\nfor arch, operating_system, path in [\n    ('amd64', 'linux',
          '/usr/share/openshift/linux_amd64/oc'),\n    ('amd64', 'mac', '/usr/share/openshift/mac/oc'),\n
          \   ('amd64', 'windows', '/usr/share/openshift/windows/oc.exe'),\n    ('arm64',
          'linux', '/usr/share/openshift/linux_arm64/oc'),\n    ('arm64', 'mac', '/usr/share/openshift/mac_arm64/oc'),\n
          \   ('ppc64le', 'linux', '/usr/share/openshift/linux_ppc64le/oc'),\n    ('s390x',
          'linux', '/usr/share/openshift/linux_s390x/oc'),\n    ]:\n  basename = os.path.basename(path)\n
          \ target_path = os.path.join(arch, operating_system, basename)\n  os.mkdir(os.path.join(arch,
          operating_system))\n  os.symlink(path, target_path)\n  base_root, _ = os.path.splitext(basename)\n
          \ archive_path_root = os.path.join(arch, operating_system, base_root)\n
          \ with tarfile.open('{}.tar'.format(archive_path_root), 'w') as tar:\n    tar.add(path,
          basename)\n  with zipfile.ZipFile('{}.zip'.format(archive_path_root), 'w')
          as zip:\n    zip.write(path, basename)\n  content.append(\n    '<a href=\"{0}\">oc
          ({1} {2})</a> (<a href=\"{3}.tar\">tar</a> <a href=\"{3}.zip\">zip</a>)'.format(\n
          \     target_path, arch, operating_system, archive_path_root\n    )\n  )\n\nfor
          root, directories, filenames in os.walk(temp_dir):\n  root_link = os.path.relpath(temp_dir,
          os.path.join(root, 'child')).replace(os.path.sep, '/')\n  for directory
          in directories:\n    write_index(\n      path=os.path.join(root, directory,
          'index.html'),\n      message='<p>Directory listings are disabled.  See
          <a href=\"{}\">here</a> for available content.</p>'.format(root_link),\n
          \   )\n\nwrite_index(\n  path=os.path.join(temp_dir, 'index.html'),\n  message='\\n'.join(\n
          \   ['<ul>'] +\n    ['  <li>{}</li>'.format(entry) for entry in content]
          +\n    ['</ul>']\n  ),\n)\n\n# Create socket\n# IPv6 should handle IPv4
          passively so long as it is not bound to a\n# specific address or set to
          IPv6_ONLY\n# https://stackoverflow.com/questions/25817848/python-3-does-http-server-support-ipv6\ntry:\n
          \ addr = ('::', 8080)\n  sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\nexcept
          socket.error as err:\n  # errno.EAFNOSUPPORT is \"socket.error: [Errno 97]
          Address family not supported by protocol\"\n  # When IPv6 is disabled, socket
          will bind using IPv4.\n  if err.errno == errno.EAFNOSUPPORT:\n    addr =
          ('', 8080)\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n
          \ else:\n    raise    \nsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,
          1)\nsock.bind(addr)\nsock.listen(5)\n\n[Thread(i, socket=sock) for i in
          range(100)]\ntime.sleep(9e9)\nEOF\nexec python3 /tmp/serve.py\n"
        command:
        - /bin/sh
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:6d46f731cbe328e293f88842f97b2dd6bfe8e9a82a1b0cf8cfc63cb2bf33f52c
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: download-server
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 0
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 120
status: {}
