apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    deprecated.daemonset.template.generation: "1"
    kubernetes.io/description: |
      This daemonset launches the ovn-kubernetes per node networking components.
    networkoperator.openshift.io/cluster-network-cidr: 10.128.0.0/14
    networkoperator.openshift.io/ip-family-mode: single-stack
    release.openshift.io/version: 4.13.0-0.ci.test-2023-03-09-115511-ci-ln-88xnydk-latest
  creationTimestamp: "2023-03-09T14:20:33Z"
  generation: 1
  labels:
    networkoperator.openshift.io/generates-operator-status: stand-alone
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          f:kubernetes.io/description: {}
          f:networkoperator.openshift.io/cluster-network-cidr: {}
          f:networkoperator.openshift.io/ip-family-mode: {}
          f:release.openshift.io/version: {}
        f:labels:
          f:networkoperator.openshift.io/generates-operator-status: {}
        f:ownerReferences:
          k:{"uid":"e6519524-ef16-4ee8-82f1-2faa42688032"}: {}
      f:spec:
        f:selector: {}
        f:template:
          f:metadata:
            f:annotations:
              f:networkoperator.openshift.io/cluster-network-cidr: {}
              f:networkoperator.openshift.io/ip-family-mode: {}
              f:target.workload.openshift.io/management: {}
            f:labels:
              f:app: {}
              f:component: {}
              f:kubernetes.io/os: {}
              f:openshift.io/component: {}
              f:type: {}
          f:spec:
            f:affinity:
              f:nodeAffinity:
                f:requiredDuringSchedulingIgnoredDuringExecution: {}
            f:containers:
              k:{"name":"kube-rbac-proxy"}:
                .: {}
                f:command: {}
                f:image: {}
                f:name: {}
                f:ports:
                  k:{"containerPort":9103,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                f:resources:
                  f:requests:
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
              k:{"name":"kube-rbac-proxy-ovn-metrics"}:
                .: {}
                f:command: {}
                f:image: {}
                f:name: {}
                f:ports:
                  k:{"containerPort":9105,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                f:resources:
                  f:requests:
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  k:{"mountPath":"/etc/pki/tls/metrics-cert"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
              k:{"name":"ovn-acl-logging"}:
                .: {}
                f:command: {}
                f:image: {}
                f:name: {}
                f:resources:
                  f:requests:
                    f:cpu: {}
                    f:memory: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  k:{"mountPath":"/run/ovn/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/log/ovn"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
              k:{"name":"ovn-controller"}:
                .: {}
                f:command: {}
                f:env:
                  k:{"name":"K8S_NODE"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      f:fieldRef: {}
                  k:{"name":"OVN_LOG_LEVEL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:name: {}
                f:resources:
                  f:requests:
                    f:cpu: {}
                    f:memory: {}
                f:securityContext:
                  f:privileged: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  k:{"mountPath":"/dev/log"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/env"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/ovn/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/ovn-ca"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/ovn-cert"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/ovn/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/lib/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/log/ovn"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
              k:{"name":"ovnkube-node"}:
                .: {}
                f:command: {}
                f:env:
                  k:{"name":"K8S_NODE"}:
                    .: {}
                    f:name: {}
                    f:valueFrom:
                      f:fieldRef: {}
                  k:{"name":"KUBERNETES_SERVICE_HOST"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"KUBERNETES_SERVICE_PORT"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"OVN_CONTROLLER_INACTIVITY_PROBE"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"OVN_KUBE_LOG_LEVEL"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:lifecycle:
                  f:preStop:
                    f:exec:
                      f:command: {}
                f:name: {}
                f:ports:
                  k:{"containerPort":29103,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:name: {}
                f:readinessProbe:
                  f:exec:
                    f:command: {}
                  f:initialDelaySeconds: {}
                  f:periodSeconds: {}
                f:resources:
                  f:requests:
                    f:cpu: {}
                    f:memory: {}
                f:securityContext:
                  f:privileged: {}
                f:terminationMessagePolicy: {}
                f:volumeMounts:
                  k:{"mountPath":"/cni-bin-dir"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/env"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/cni/net.d"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/ovn/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/etc/systemd/system"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/host"}:
                    .: {}
                    f:mountPath: {}
                    f:mountPropagation: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/ovn-ca"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/ovn-cert"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/netns"}:
                    .: {}
                    f:mountPath: {}
                    f:mountPropagation: {}
                    f:name: {}
                    f:readOnly: {}
                  k:{"mountPath":"/run/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/ovn-kubernetes/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/ovn/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/run/ovnkube-config/"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/lib/cni/networks/ovn-k8s-cni-overlay"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
                  k:{"mountPath":"/var/lib/openvswitch"}:
                    .: {}
                    f:mountPath: {}
                    f:name: {}
            f:dnsPolicy: {}
            f:hostNetwork: {}
            f:hostPID: {}
            f:nodeSelector: {}
            f:priorityClassName: {}
            f:serviceAccountName: {}
            f:tolerations: {}
            f:volumes:
              k:{"name":"env-overrides"}:
                .: {}
                f:configMap:
                  f:name: {}
                  f:optional: {}
                f:name: {}
              k:{"name":"etc-openvswitch"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-cni-bin"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-cni-netd"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-run-netns"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-run-ovn-kubernetes"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-slash"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"host-var-lib-cni-networks-ovn-kubernetes"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"log-socket"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"node-log"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"ovn-ca"}:
                .: {}
                f:configMap:
                  f:name: {}
                f:name: {}
              k:{"name":"ovn-cert"}:
                .: {}
                f:name: {}
                f:secret:
                  f:secretName: {}
              k:{"name":"ovn-node-metrics-cert"}:
                .: {}
                f:name: {}
                f:secret:
                  f:optional: {}
                  f:secretName: {}
              k:{"name":"ovnkube-config"}:
                .: {}
                f:configMap:
                  f:name: {}
                f:name: {}
              k:{"name":"run-openvswitch"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"run-ovn"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"systemd-units"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
              k:{"name":"var-lib-openvswitch"}:
                .: {}
                f:hostPath:
                  f:path: {}
                f:name: {}
        f:updateStrategy:
          f:rollingUpdate:
            f:maxUnavailable: {}
          f:type: {}
    manager: cluster-network-operator/operconfig
    operation: Apply
    time: "2023-03-09T14:20:33Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:currentNumberScheduled: {}
        f:desiredNumberScheduled: {}
        f:numberAvailable: {}
        f:numberReady: {}
        f:observedGeneration: {}
        f:updatedNumberScheduled: {}
    manager: kube-controller-manager
    operation: Update
    subresource: status
    time: "2023-03-09T14:32:07Z"
  name: ovnkube-node
  namespace: openshift-ovn-kubernetes
  ownerReferences:
  - apiVersion: operator.openshift.io/v1
    blockOwnerDeletion: true
    controller: true
    kind: Network
    name: cluster
    uid: e6519524-ef16-4ee8-82f1-2faa42688032
  resourceVersion: "14225"
  uid: 8b6ad0dc-8208-4b89-9ad9-f44d3b557593
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ovnkube-node
  template:
    metadata:
      annotations:
        networkoperator.openshift.io/cluster-network-cidr: 10.128.0.0/14
        networkoperator.openshift.io/ip-family-mode: single-stack
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      creationTimestamp: null
      labels:
        app: ovnkube-node
        component: network
        kubernetes.io/os: linux
        openshift.io/component: network
        type: infra
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: network.operator.openshift.io/dpu-host
                operator: DoesNotExist
              - key: network.operator.openshift.io/dpu
                operator: DoesNotExist
      containers:
      - command:
        - /bin/bash
        - -c
        - "set -e\nif [[ -f \"/env/${K8S_NODE}\" ]]; then\n  set -o allexport\n  source
          \"/env/${K8S_NODE}\"\n  set +o allexport\nfi  \n\necho \"$(date -Iseconds)
          - starting ovn-controller\"\nexec ovn-controller unix:/var/run/openvswitch/db.sock
          -vfile:off \\\n  --no-chdir --pidfile=/var/run/ovn/ovn-controller.pid \\\n
          \ --syslog-method=\"null\" \\\n  --log-file=/var/log/ovn/acl-audit-log.log
          \\\n  -vFACILITY:\"local0\" \\\n  -p /ovn-cert/tls.key -c /ovn-cert/tls.crt
          -C /ovn-ca/ca-bundle.crt \\\n  -vconsole:\"${OVN_LOG_LEVEL}\" -vconsole:\"acl_log:off\"
          \\\n  -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
          \ -vsyslog:\"acl_log:info\" \\\n  -vfile:\"acl_log:info\"\n"
        env:
        - name: OVN_LOG_LEVEL
          value: info
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:d554d78ce21caa55b704d4621d7a2ba806dd6321912c36d5cd8b61e9a0934d0b
        imagePullPolicy: IfNotPresent
        name: ovn-controller
        resources:
          requests:
            cpu: 10m
            memory: 300Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run/openvswitch
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /etc/openvswitch
          name: etc-openvswitch
        - mountPath: /etc/ovn/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch
          name: var-lib-openvswitch
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
        - mountPath: /var/log/ovn
          name: node-log
        - mountPath: /dev/log
          name: log-socket
      - command:
        - /bin/bash
        - -c
        - "set -euo pipefail\n\n# Rotate audit log files when then get to max size
          (in bytes)\nMAXFILESIZE=$(( \"50\"*1000000 )) \nLOGFILE=/var/log/ovn/acl-audit-log.log\nCONTROLLERPID=$(cat
          /run/ovn/ovn-controller.pid)\n\n# Redirect err to null so no messages are
          shown upon rotation\ntail -F ${LOGFILE} 2> /dev/null &\n\nwhile true\ndo\n
          \ # Make sure ovn-controller's logfile exists, and get current size in bytes
          \n  if [ -f \"$LOGFILE\" ]; then \n    file_size=`du -b ${LOGFILE} | tr
          -s '\\t' ' ' | cut -d' ' -f1`\n  else \n    ovs-appctl -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl
          vlog/reopen\n    file_size=`du -b ${LOGFILE} | tr -s '\\t' ' ' | cut -d'
          ' -f1`\n  fi \n  \n  if [ $file_size -gt $MAXFILESIZE ];then\n    echo \"Rotating
          OVN ACL Log File\"\n    timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n    mv ${LOGFILE}
          /var/log/ovn/acl-audit-log.$timestamp.log\n    ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
          vlog/reopen\n    CONTROLLERPID=$(cat /run/ovn/ovn-controller.pid)\n  fi\n\n
          \ # sleep for 30 seconds to avoid wasting CPU \n  sleep 30 \ndone\n"
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:d554d78ce21caa55b704d4621d7a2ba806dd6321912c36d5cd8b61e9a0934d0b
        imagePullPolicy: IfNotPresent
        name: ovn-acl-logging
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/log/ovn
          name: node-log
        - mountPath: /run/ovn/
          name: run-ovn
      - command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          set -euo pipefail
          TLS_PK=/etc/pki/tls/metrics-cert/tls.key
          TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
          # As the secret mount is optional we must wait for the files to be present.
          # The service is created in monitor.yaml and this is created in sdn.yaml.
          # If it isn't created there is probably an issue so we want to crashloop.
          retries=0
          TS=$(date +%s)
          WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
          HAS_LOGGED_INFO=0

          log_missing_certs(){
              CUR_TS=$(date +%s)
              if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
                echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
              elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
                echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
                HAS_LOGGED_INFO=1
              fi
          }
          while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
            log_missing_certs
            sleep 5
          done

          echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
          exec /usr/bin/kube-rbac-proxy \
            --logtostderr \
            --secure-listen-address=:9103 \
            --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
            --upstream=http://127.0.0.1:29103/ \
            --tls-private-key-file=${TLS_PK} \
            --tls-cert-file=${TLS_CERT}
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:199a16f6e9bdfc720f6efa5cb21b207d79ef1fcda9c58e5dbef1f2d2fc09d747
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy
        ports:
        - containerPort: 9103
          hostPort: 9103
          name: https
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/pki/tls/metrics-cert
          name: ovn-node-metrics-cert
          readOnly: true
      - command:
        - /bin/bash
        - -c
        - |
          #!/bin/bash
          set -euo pipefail
          TLS_PK=/etc/pki/tls/metrics-cert/tls.key
          TLS_CERT=/etc/pki/tls/metrics-cert/tls.crt
          # As the secret mount is optional we must wait for the files to be present.
          # The service is created in monitor.yaml and this is created in sdn.yaml.
          # If it isn't created there is probably an issue so we want to crashloop.
          retries=0
          TS=$(date +%s)
          WARN_TS=$(( ${TS} + $(( 20 * 60)) ))
          HAS_LOGGED_INFO=0

          log_missing_certs(){
              CUR_TS=$(date +%s)
              if [[ "${CUR_TS}" -gt "WARN_TS"  ]]; then
                echo $(date -Iseconds) WARN: ovn-node-metrics-cert not mounted after 20 minutes.
              elif [[ "${HAS_LOGGED_INFO}" -eq 0 ]] ; then
                echo $(date -Iseconds) INFO: ovn-node-metrics-cert not mounted. Waiting one hour.
                HAS_LOGGED_INFO=1
              fi
          }
          while [[ ! -f "${TLS_PK}" ||  ! -f "${TLS_CERT}" ]] ; do
            log_missing_certs
            sleep 5
          done

          echo $(date -Iseconds) INFO: ovn-node-metrics-certs mounted, starting kube-rbac-proxy
          exec /usr/bin/kube-rbac-proxy \
            --logtostderr \
            --secure-listen-address=:9105 \
            --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 \
            --upstream=http://127.0.0.1:29105/ \
            --tls-private-key-file=${TLS_PK} \
            --tls-cert-file=${TLS_CERT}
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:199a16f6e9bdfc720f6efa5cb21b207d79ef1fcda9c58e5dbef1f2d2fc09d747
        imagePullPolicy: IfNotPresent
        name: kube-rbac-proxy-ovn-metrics
        ports:
        - containerPort: 9105
          hostPort: 9105
          name: https
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 20Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/pki/tls/metrics-cert
          name: ovn-node-metrics-cert
          readOnly: true
      - command:
        - /bin/bash
        - -c
        - |
          set -xe
          if [[ -f "/env/${K8S_NODE}" ]]; then
            set -o allexport
            source "/env/${K8S_NODE}"
            set +o allexport
          fi
          cp -f /usr/libexec/cni/ovn-k8s-cni-overlay /cni-bin-dir/
          ovn_config_namespace=openshift-ovn-kubernetes
          echo "I$(date "+%m%d %H:%M:%S.%N") - disable conntrack on geneve port"
          iptables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
          iptables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
          ip6tables -t raw -A PREROUTING -p udp --dport 6081 -j NOTRACK
          ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK
          echo "I$(date "+%m%d %H:%M:%S.%N") - starting ovnkube-node"

          if [ "shared" == "shared" ]; then
            gateway_mode_flags="--gateway-mode shared --gateway-interface br-ex"
          elif [ "shared" == "local" ]; then
            gateway_mode_flags="--gateway-mode local --gateway-interface br-ex"
          else
            echo "Invalid OVN_GATEWAY_MODE: \"shared\". Must be \"local\" or \"shared\"."
            exit 1
          fi

          export_network_flows_flags=
          if [[ -n "${NETFLOW_COLLECTORS}" ]] ; then
            export_network_flows_flags="--netflow-targets ${NETFLOW_COLLECTORS}"
          fi
          if [[ -n "${SFLOW_COLLECTORS}" ]] ; then
            export_network_flows_flags="$export_network_flows_flags --sflow-targets ${SFLOW_COLLECTORS}"
          fi
          if [[ -n "${IPFIX_COLLECTORS}" ]] ; then
            export_network_flows_flags="$export_network_flows_flags --ipfix-targets ${IPFIX_COLLECTORS}"
          fi
          if [[ -n "${IPFIX_CACHE_MAX_FLOWS}" ]] ; then
            export_network_flows_flags="$export_network_flows_flags --ipfix-cache-max-flows ${IPFIX_CACHE_MAX_FLOWS}"
          fi
          if [[ -n "${IPFIX_CACHE_ACTIVE_TIMEOUT}" ]] ; then
            export_network_flows_flags="$export_network_flows_flags --ipfix-cache-active-timeout ${IPFIX_CACHE_ACTIVE_TIMEOUT}"
          fi
          if [[ -n "${IPFIX_SAMPLING}" ]] ; then
            export_network_flows_flags="$export_network_flows_flags --ipfix-sampling ${IPFIX_SAMPLING}"
          fi
          gw_interface_flag=
          # if br-ex1 is configured on the node, we want to use it for external gateway traffic
          if [ -d /sys/class/net/br-ex1 ]; then
            gw_interface_flag="--exgw-interface=br-ex1"
          fi

          node_mgmt_port_netdev_flags=
          if [[ -n "${OVNKUBE_NODE_MGMT_PORT_NETDEV}" ]] ; then
            node_mgmt_port_netdev_flags="--ovnkube-node-mgmt-port-netdev ${OVNKUBE_NODE_MGMT_PORT_NETDEV}"
          fi

          multi_network_enabled_flag=
          if [[ "true" == "true" ]]; then
            multi_network_enabled_flag="--enable-multi-network"
          fi

          exec /usr/bin/ovnkube --init-node "${K8S_NODE}" \
            --nb-address "ssl:10.0.130.93:9641" \
            --sb-address "ssl:10.0.130.93:9642" \
            --nb-client-privkey /ovn-cert/tls.key \
            --nb-client-cert /ovn-cert/tls.crt \
            --nb-client-cacert /ovn-ca/ca-bundle.crt \
            --nb-cert-common-name "ovn" \
            --sb-client-privkey /ovn-cert/tls.key \
            --sb-client-cert /ovn-cert/tls.crt \
            --sb-client-cacert /ovn-ca/ca-bundle.crt \
            --sb-cert-common-name "ovn" \
            --config-file=/run/ovnkube-config/ovnkube.conf \
            --loglevel "${OVN_KUBE_LOG_LEVEL}" \
            --inactivity-probe="${OVN_CONTROLLER_INACTIVITY_PROBE}" \
            ${gateway_mode_flags} \
            ${node_mgmt_port_netdev_flags} \
            --metrics-bind-address "127.0.0.1:29103" \
            --ovn-metrics-bind-address "127.0.0.1:29105" \
            --metrics-enable-pprof \
            --export-ovs-metrics \
            --disable-snat-multiple-gws \
            ${export_network_flows_flags} \
            ${multi_network_enabled_flag} \
            ${gw_interface_flag}
        env:
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        - name: KUBERNETES_SERVICE_HOST
          value: api-int.ocp.choomba.one
        - name: OVN_CONTROLLER_INACTIVITY_PROBE
          value: "180000"
        - name: OVN_KUBE_LOG_LEVEL
          value: "4"
        - name: K8S_NODE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        image: registry.build05.ci.openshift.org/ci-ln-88xnydk/stable@sha256:d554d78ce21caa55b704d4621d7a2ba806dd6321912c36d5cd8b61e9a0934d0b
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - rm
              - -f
              - /etc/cni/net.d/10-ovn-kubernetes.conf
        name: ovnkube-node
        ports:
        - containerPort: 29103
          hostPort: 29103
          name: metrics-port
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - test
            - -f
            - /etc/cni/net.d/10-ovn-kubernetes.conf
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 10m
            memory: 300Mi
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/systemd/system
          name: systemd-units
          readOnly: true
        - mountPath: /host
          mountPropagation: HostToContainer
          name: host-slash
          readOnly: true
        - mountPath: /run/ovn-kubernetes/
          name: host-run-ovn-kubernetes
        - mountPath: /run/netns
          mountPropagation: HostToContainer
          name: host-run-netns
          readOnly: true
        - mountPath: /cni-bin-dir
          name: host-cni-bin
        - mountPath: /etc/cni/net.d
          name: host-cni-netd
        - mountPath: /var/lib/cni/networks/ovn-k8s-cni-overlay
          name: host-var-lib-cni-networks-ovn-kubernetes
        - mountPath: /run/openvswitch
          name: run-openvswitch
        - mountPath: /run/ovn/
          name: run-ovn
        - mountPath: /etc/openvswitch
          name: etc-openvswitch
        - mountPath: /etc/ovn/
          name: etc-openvswitch
        - mountPath: /var/lib/openvswitch
          name: var-lib-openvswitch
        - mountPath: /run/ovnkube-config/
          name: ovnkube-config
        - mountPath: /env
          name: env-overrides
        - mountPath: /ovn-cert
          name: ovn-cert
        - mountPath: /ovn-ca
          name: ovn-ca
      dnsPolicy: Default
      hostNetwork: true
      hostPID: true
      nodeSelector:
        beta.kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: ovn-kubernetes-node
      serviceAccountName: ovn-kubernetes-node
      terminationGracePeriodSeconds: 30
      tolerations:
      - operator: Exists
      volumes:
      - hostPath:
          path: /etc/systemd/system
          type: ""
        name: systemd-units
      - hostPath:
          path: /
          type: ""
        name: host-slash
      - hostPath:
          path: /run/netns
          type: ""
        name: host-run-netns
      - hostPath:
          path: /var/lib/openvswitch/data
          type: ""
        name: var-lib-openvswitch
      - hostPath:
          path: /etc/openvswitch
          type: ""
        name: etc-openvswitch
      - hostPath:
          path: /var/run/openvswitch
          type: ""
        name: run-openvswitch
      - hostPath:
          path: /var/run/ovn
          type: ""
        name: run-ovn
      - hostPath:
          path: /var/log/ovn
          type: ""
        name: node-log
      - hostPath:
          path: /dev/log
          type: ""
        name: log-socket
      - hostPath:
          path: /run/ovn-kubernetes
          type: ""
        name: host-run-ovn-kubernetes
      - hostPath:
          path: /var/lib/cni/bin
          type: ""
        name: host-cni-bin
      - hostPath:
          path: /var/run/multus/cni/net.d
          type: ""
        name: host-cni-netd
      - hostPath:
          path: /var/lib/cni/networks/ovn-k8s-cni-overlay
          type: ""
        name: host-var-lib-cni-networks-ovn-kubernetes
      - configMap:
          defaultMode: 420
          name: ovnkube-config
        name: ovnkube-config
      - configMap:
          defaultMode: 420
          name: env-overrides
          optional: true
        name: env-overrides
      - configMap:
          defaultMode: 420
          name: ovn-ca
        name: ovn-ca
      - name: ovn-cert
        secret:
          defaultMode: 420
          secretName: ovn-cert
      - name: ovn-node-metrics-cert
        secret:
          defaultMode: 420
          optional: true
          secretName: ovn-node-metrics-cert
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 10%
    type: RollingUpdate
status:
  currentNumberScheduled: 1
  desiredNumberScheduled: 1
  numberAvailable: 1
  numberMisscheduled: 0
  numberReady: 1
  observedGeneration: 1
  updatedNumberScheduled: 1
